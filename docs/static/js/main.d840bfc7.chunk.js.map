{"version":3,"sources":["pokemonArray.js","components/Pokemon.js","components/PokeList.js","components/footer.js","components/header.js","components/App.js","serviceWorker.js","index.js"],"names":["pokemonArray","id","name","types","evolution","url","Pokemon","props","pokemonTypes","pokemon","map","type","index","className","key","src","alt","title","PokeList","items","Footer","Header","App","useState","pokemons","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sXAyEeA,G,MAzEM,CACnB,CACEC,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,YACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,UACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,aACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBC,UAAW,aACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SACRC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,WACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,YACXC,IAAK,kFAEP,CACEJ,GAAI,GACJC,KAAM,WACNC,MAAO,CAAC,OACRC,UAAW,KACXC,IAAK,qFC7CMC,G,MApBC,SAACC,GACf,IAAMC,EAAeD,EAAME,QAAQN,MAAMO,KAAI,SAACC,EAAMC,GAClD,OACE,wBAAIC,UAAU,gCAAgCC,IAAKF,GAChDD,MAKP,OACE,wBAAIE,UAAU,gBACZ,yBAAKA,UAAU,mBAAmBE,IAAKR,EAAME,QAAQJ,IAAKW,IAAKT,EAAME,QAAQP,KAAMe,MAAOV,EAAME,QAAQP,OACxG,wBAAIW,UAAU,sBACd,wBAAIA,UAAU,qBAAqBN,EAAME,QAAQP,MACjD,wBAAIW,UAAU,sBACd,wBAAIA,UAAU,2BAA2BL,MCNhCU,G,MARE,SAACX,GAChB,IAAMY,EAAQZ,EAAMP,aAAaU,KAAI,SAACD,GACpC,OAAO,kBAAC,EAAD,CAASK,IAAKL,EAAQR,GAAIQ,QAASA,OAG5C,OAAO,wBAAII,UAAU,oBAAoBM,KCE5BC,G,MATA,WACb,OACE,yBAAKP,UAAU,UACb,6BACA,uBAAGA,UAAU,aAAb,+BCISQ,G,MARA,WACb,OACE,yBAAKR,UAAU,UACb,wBAAIA,UAAU,gBAAd,0BCYSS,EAXH,WAAO,IAAD,EACGC,mBAASvB,GAArBwB,EADS,oBAEhB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUxB,aAAcwB,IACxB,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d840bfc7.chunk.js","sourcesContent":["const pokemonArray = [\n  {\n    id: 1,\n    name: \"bulbasaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: null,\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\",\n  },\n  {\n    id: 2,\n    name: \"ivysaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"bulbasaur\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\",\n  },\n  {\n    id: 3,\n    name: \"venusaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"ivysaur\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\",\n  },\n  {\n    id: 4,\n    name: \"charmander\",\n    types: [\"fire\"],\n    evolution: null,\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\",\n  },\n  {\n    id: 5,\n    name: \"charmeleon\",\n    types: [\"fire\"],\n    evolution: \"charmander\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\",\n  },\n  {\n    id: 6,\n    name: \"charizard\",\n    types: [\"flying\", \"fire\"],\n    evolution: \"charmeleon\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\",\n  },\n  {\n    id: 7,\n    name: \"squirtle\",\n    types: [\"water\"],\n    evolution: null,\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\",\n  },\n  {\n    id: 8,\n    name: \"wartortle\",\n    types: [\"water\"],\n    evolution: \"squirtle\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\",\n  },\n  {\n    id: 9,\n    name: \"blastoise\",\n    types: [\"water\"],\n    evolution: \"wartortle\",\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\",\n  },\n  {\n    id: 10,\n    name: \"caterpie\",\n    types: [\"bug\"],\n    evolution: null,\n    url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\",\n  },\n];\n\nexport default pokemonArray;\n","import React from \"react\";\nimport \"../stylesheets/pokemon.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Pokemon = (props) => {\n  const pokemonTypes = props.pokemon.types.map((type, index) => {\n    return (\n      <li className=\"pokemon-card-types-list-items\" key={index}>\n        {type}\n      </li>\n    );\n  });\n\n  return (\n    <li className=\"pokemon-card\">\n      <img className=\"pokemon-card-img\" src={props.pokemon.url} alt={props.pokemon.name} title={props.pokemon.name} />\n      <hr className=\"pokemon-card-line\"></hr>\n      <h2 className=\"pokemon-card-name\">{props.pokemon.name}</h2>\n      <hr className=\"pokemon-card-line\"></hr>\n      <ul className=\"pokemon-card-types-list\">{pokemonTypes}</ul>\n    </li>\n  );\n};\n\nexport default Pokemon;\nPokemon.propTypes = {\n  pokemon: PropTypes.object,\n};\n","import React from \"react\";\nimport Pokemon from \"./Pokemon\";\nimport \"../stylesheets/pokelist.css\";\nimport PropTypes from \"prop-types\";\n\nconst PokeList = (props) => {\n  const items = props.pokemonArray.map((pokemon) => {\n    return <Pokemon key={pokemon.id} pokemon={pokemon} />;\n  });\n\n  return <ul className=\"poke-list-styles\">{items}</ul>;\n};\n\nexport default PokeList;\nPokeList.propTypes = {\n  pokemonArray: PropTypes.array,\n};\n","import React from \"react\";\nimport \"../stylesheets/footer.css\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <hr></hr>\n      <p className=\"copyright\">© Eva López Merino</p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"../stylesheets/header.scss\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h2 className=\"header-title\">Mi lista de pokemon</h2>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport \"../stylesheets/App.css\";\nimport pokemonArray from \"../pokemonArray\";\nimport PokeList from \"../components/PokeList\";\nimport Footer from \"./footer\";\nimport Header from \"./header\";\n\nconst App = () => {\n  const [pokemons] = useState(pokemonArray);\n  return (\n    <>\n      <Header />\n      <PokeList pokemonArray={pokemons} />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}